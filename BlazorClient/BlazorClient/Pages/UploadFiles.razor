@page "/UploadFiles"
@using Google.Protobuf
@using BlazorClient.gRPCClients.Interfaces
@using UIComponents
@using Microsoft.AspNetCore.Components
@using System.ComponentModel.DataAnnotations
@inject IUserService UsergRpcClient
@inject IFileService FilegRpcClient;
@inject ICategoryService CategoryGRpcClient;
@inject IAuthService AuthService
<CascadingAuthenticationState>
<h3>Upload Files</h3>
    <AuthorizeView Policy="LoggedUsersOnly">
        <Authorized>
            <MudTextField @bind-Value="Title" Label="Title" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="Description" Label="File Description" Variant="Variant.Text"></MudTextField>
            @* <MudTextField @bind-Value="Username" Label="Username" Variant="Variant.Text"></MudTextField> *@
            <MudSelect Margin="Margin.Dense" T="Category" Label="Choose Category" @bind-Value="@SelectedCategory" Variant="Variant.Filled">

                @foreach (Category category in AllCategories.Categories)
                {
                    <MudSelectItem Value="@(category)">@category.Name</MudSelectItem>
                }

            </MudSelect>
            <InputFile OnChange="@LoadFiles"/>
            <MudButton OnClick="@CreateAsync" Variant="Variant.Filled" Color="Color.Primary"> Submit File </MudButton>

            @if (!string.IsNullOrEmpty(Message))
            {
                <div>
                    <span>@Message</span>
                </div>
            }

            <PopUp ShowPopUp="showPopUp">
                <div>
                    <span>@Message</span>
                    <img src="@GifPath" alt="GIF image" style="width: 100%; height: auto"/>
                    <MudButton @onclick="Proceed"> OK</MudButton>
                </div>
            </PopUp>
        </Authorized>
        <NotAuthorized>
            <h5>You must be logged in!</h5>
        </NotAuthorized>

    </AuthorizeView>
</CascadingAuthenticationState>
@code {

    private IBrowserFile? file;
    private string Title { get; set; } = "";
    private string Description { get; set; } = "";
    private string Username { get; set; } = "";
    private string Message = "";
    private string contentType { get; set; } = "";
    private CategoryList AllCategories { get; set; }
    private Category SelectedCategory { get; set; }
    private bool showPopUp;
    private string GifPath { get; set; }


    protected override void OnInitialized()
    {
        AllCategories = CategoryGRpcClient.GetAllAsync(new Empty()).Result;
        showPopUp = false;
    }

    private void LoadFiles(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles().FirstOrDefault();
        
        if (file != null) contentType = Path.GetExtension(file.Name);
        Console.WriteLine(contentType);
    }

    private async void CreateAsync()
    {
        
        if (file != null)

        {
            byte[] bytes = new byte[file.Size]; 
            using (var ms = new MemoryStream())
            {
                await file.OpenReadStream().CopyToAsync(ms);
                bytes = ms.ToArray();
            }

            try
            {
                Username = await AuthService.getAuthenticatedUsername();

                var newFile = new FileCreationDto()
                {
                    Title = Title,
                    Description = Description,
                    Bytes = ByteString.CopyFrom(bytes),
                    UploadedBy = await UsergRpcClient.GetByUsernameAsync(Username), // to be changed so that Username is from the logged in user
                    ContentType = contentType, 
                    Category = SelectedCategory
                };
                await FilegRpcClient.CreateAsync(newFile);
                Message = "File " + newFile.Title +" successfully uploaded";
                GifPath = "pictures/done.gif";
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                Message = e.Message;
                GifPath = "pictures/fail.gif";
            }
            showPopUp = true;
            StateHasChanged();

            Console.WriteLine("File sent to the service");
        }
        
        else
        {
            Message = "No file uploaded";
            GifPath = "pictures/fail.gif";
            showPopUp = true;
            StateHasChanged();
        }
    }
    
    
    private void Proceed()
    {
        showPopUp = false;
    }

}
