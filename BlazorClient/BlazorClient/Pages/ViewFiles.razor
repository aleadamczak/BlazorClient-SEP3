@page "/ViewFiles"


@using BlazorClient.gRPCClients.Interfaces
@using Google.Protobuf
@using Grpc.Core

@inject IUserService UsergRpcClient
@inject IFileService FilegRpcClient;

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: black !important;
        }

            .selected > td .mud-input {
                color: black !important;
            }
</style>

<h1>All Files</h1>
<MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowRight" Style="background-color: #1E88E5; color: black; width: 200px; height: 60px;" @onclick="() => Delete(selectedFile.Id)">
    Delete file
</MudButton>

@if (!string.IsNullOrEmpty(Message))
{
    <div>
         <MudAlert Severity="Severity.Success">@Message</MudAlert>
    </div>
}
   



<MudTable Items="@files" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" Filter="new Func<FileDisplayDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedFile">
    <ToolBarContent>
        @* <MudText Typo="Typo.h6">File List</MudText> *@
       
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Title</MudTh>
        <MudTh>Category</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Uploaded By</MudTh>
        <MudTh>File Type</MudTh>
        <MudTh>Download file</MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Category">@context.Category.Name</MudTd>
        <MudTd DataLabel="Description">@context.Description</MudTd>
        <MudTd DataLabel="Uploaded By">@context.UploadedBy.Username</MudTd>
        <MudTd DataLabel="File Type">@context.ContentType</MudTd>
        <MudTd DataLabel="Download"><MudButton Variant="Variant.Filled" @onclick="() => DownloadFile(context.Id)">Download</MudButton></MudTd>

    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


 
<div class="d-flex flex-wrap mt-4">
     <div style="min-width:200px;">
         <MudText Inline="true" Class="align-self-center">Selected: @selectedFile?.Title</MudText>
     </div>
 </div>

@code {
    
    private IEnumerable<FileDisplayDto>? files { get; set; }
    
    private int selectedRowNumber = -1;
    private MudTable<FileDisplayDto> mudTable;
    
    private string searchString1 = "";
    private FileDisplayDto selectedFile = null;
    private HashSet<FileDisplayDto> selectedFiles = new HashSet<FileDisplayDto>();
    private string Message { get; set; } = "";

    private bool FilterFunc1(FileDisplayDto file) => FilterFunc(file, searchString1);
 
    private bool FilterFunc(FileDisplayDto file, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (file.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
 
    
    private string SelectedRowClassFunc(FileDisplayDto element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;

        }
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";

        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            files = await FilegRpcClient.GetAllDtosAsync();

        }
        catch (Exception)
        {
            Console.WriteLine("Exception occured when fetching file data");
        }

    }

    private async void DownloadFile(int number)
    {
        
            Id num = new Id()
            {
                Id_ = number
            };

        FileDownloadDto downloadFile = await FilegRpcClient.GetAsync(num);
        byte[] bytes = downloadFile.ToByteArray();
        string downloadPath = Environment.GetFolderPath(Environment.SpecialFolder.Personal);
        Console.WriteLine(downloadPath);
        string title = downloadFile.Title;
        string contentType = downloadFile.ContentType;
        System.IO.File.WriteAllBytes(downloadPath + "/" + title + contentType, bytes);
    }
            FileDownloadDto downloadFile = await FilegRpcClient.GetAsync(num);
            byte[] bytes = downloadFile.ToByteArray();
            string title = downloadFile.Title;

    // byte[] byteData;
    // using (FileStream fileStream = new FileStream("upload/Ordrebekr√¶ftelse.pdf",FileMode.Open,FileAccess.Read))
    // {
    //     using (MemoryStream memoryStream = new MemoryStream())
    //     {
    //         fileStream.CopyTo(memoryStream);
    //         byteData = memoryStream.ToArray();
    //     }
    // }

            System.IO.File.WriteAllBytes("download/" + title + ".pdf", bytes);


        }


    private void Delete(int id)
    {
        try
        {
            if (id != null)
            {
                FilegRpcClient.Delete(id);
                Message = "File Deleted";
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }

    }

}