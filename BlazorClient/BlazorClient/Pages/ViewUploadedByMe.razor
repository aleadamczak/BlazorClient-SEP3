@page "/ViewUploadedByMe"
@using BlazorClient.gRPCClients.Interfaces
@using System.Security.Claims
@inject IAuthService AuthService

@inject IFileService FilegRpcClient
<CascadingAuthenticationState>
<h3>Files Uploaded By Me</h3>
<AuthorizeView Policy="LoggedUsersOnly">
<Authorized>
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowRight" Style="background-color: #1E88E5; color: black; width: 200px; height: 60px;" @onclick="() => Delete(selectedFile.Id)">
        Delete file
    </MudButton>

    <MudTable Items="@files" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable" RowClassFunc="@SelectedRowClassFunc" Filter="new Func<FileDisplayDto,bool>(FilterFunc1)" @bind-SelectedItem="selectedFile">
        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>File Type</MudTh>
            <MudTh> File Description </MudTh>
            <MudTh> File Category </MudTh>
        </HeaderContent>
        <RowTemplate Context ="content">
            <MudTd DataLabel="Title">@content.Title</MudTd>
            <MudTd DataLabel="File Type">@content.ContentType</MudTd>
            <MudTd DataLabel="File Description">@content.Description</MudTd>
            <MudTd DataLabel="File Category">@content.Description</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</Authorized>
    <NotAuthorized>
        <h5>You must be logged in!</h5>
    </NotAuthorized>
</AuthorizeView>

</CascadingAuthenticationState>
@code {
    
    
    private IEnumerable<FileDisplayDto> files { get; set; }
    private int selectedRowNumber = -1;
    private MudTable<FileDisplayDto> mudTable;
    private string searchString1 = "";
    private FileDisplayDto selectedFile = null;
    private HashSet<PrivateFileDisplayDto> selectedFiles = new HashSet<PrivateFileDisplayDto>();
    private string Message { get; set; } = "";
    private bool FilterFunc1(FileDisplayDto file) => FilterFunc(file, searchString1);
    private bool showPopUp;
    private string GifPath { get; set; }
 
    private bool FilterFunc(FileDisplayDto file, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (file.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
 
    
    private string SelectedRowClassFunc(FileDisplayDto element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;

        }
        if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";

        }
        return string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        try
            {
                var allFileDtos = await FilegRpcClient.GetAllDtosAsync();

                User user = await AuthService.getAuthenticatedUserObject();
                files = allFileDtos.Where(f => f.UploadedBy.Equals(user));

            }
            catch (Exception)
            {
                Console.WriteLine("Exception occured when fetching file data");
            }
    }


    private void Delete(int id)
    {
        try
        {
            if (id != null)
            {
                FilegRpcClient.Delete(id);
                Message = "File Deleted";
            }
            StateHasChanged();
        }
        catch (Exception e)
        {
            Message = e.Message;
        }

    }
    
}