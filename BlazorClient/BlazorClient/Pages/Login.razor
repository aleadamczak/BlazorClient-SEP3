@page "/Login"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Routing
@using BlazorClient.gRPCClients.Interfaces
@inject IUserService UsergRpcClient
@using UIComponents
@using BlazorClient.Auth
@using System.Security.Claims

<MudContainer Class="login-container">
    <MudCard Class="login-card m-4">
        <MudCardContent>
            <MudTypography Variant="TypographyVariant.H4" Class="text-center">Login</MudTypography>
            <MudForm @ref="loginForm" OnValidSubmit="HandleValidSubmit">
                <MudTextField @bind-Value="loginModel.Username" Label="Username" Required="true" />
                <MudTextField @bind-Value="loginModel.Password" Label="Password" Required="true" Type="InputType.Password" />
                <div class="text-center mt-4">
                    <MudButton Class="login-button" Variant="Variant.Filled" Color="Color.Primary" Type="ButtonType.Submit" @onclick="LoginAsync">Login</MudButton>
                </div>
            </MudForm>
            <div class="text-center mt-4">
                <span>Don't have an account?</span>
                <MudLink Href="/Register">Register here</MudLink>
            </div>
        </MudCardContent>
    </MudCard>
</MudContainer>

<PopUp ShowPopUp="showPopUp" >
    <div>
        <span>@Message</span>
        <MudButton @onclick="Proceed">OK</MudButton>
    </div>
</PopUp>

@code {
    private MudForm loginForm;
    private LoginModel loginModel = new LoginModel();
    private string Message = "";
    private bool showPopUp;
    
    protected override void OnInitialized()
    {
        showPopUp = false;
    }

    private async Task HandleValidSubmit()
    {
        // TODO: Perform login authentication logic here
        // if (/* authentication is successful */)
        // {
        //     NavigationManager.NavigateTo("/dashboard"); // Redirect to the dashboard page after successful login
        // }
        // else
        // {
        //     // Show error message or handle failed login
        // }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
    
    private async Task LoginAsync()
    {
        if (!string.IsNullOrEmpty(loginModel.Username) && !string.IsNullOrEmpty(loginModel.Password))
        {
            try
            {
                UserTokenDto loggedInUser = await UsergRpcClient.LoginAsync(new UserLogInDto
                {
                    Username = loginModel.Username,
                    Password = loginModel.Password
                });

    // Handle the logged-in user
                if (loggedInUser != null)
                {
                    string token = loggedInUser.Token;
                    JwtAuthService.Jwt = token;
                    Console.WriteLine(JwtAuthService.Jwt);
                    
                    ClaimsPrincipal principal = JwtAuthService.CreateClaimsPrincipal();

    // Invoke the auth state change event
                    // JwtAuthService.OnAuthStateChanged.Invoke(principal);
                    Message = "Login successful, welcome " + principal.FindFirst(c => c.Type =="username")?.Value + "!";
                    showPopUp = true;
                    StateHasChanged();
                }
                else
                {
    // Login failed
                    Message = "Invalid username or password";
                    showPopUp = true;
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
    // Handle any exceptions that occurred during the login process
                Message = e.Message;
                showPopUp = true;
                StateHasChanged();
            }
        }
        else
        {
            Message = "Username and password are required";
            showPopUp = true;
            StateHasChanged();
        }
    }
    
    private void Proceed()
    {
        showPopUp = false;
        NavigationManager.NavigateTo("/ViewFiles", forceLoad:true);
    }

}
